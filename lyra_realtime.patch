diff --git a/lyra/cli_example/BUILD b/lyra/cli_example/BUILD
index 8c4a9c3..b76e3cb 100644
--- a/lyra/cli_example/BUILD
+++ b/lyra/cli_example/BUILD
@@ -8,6 +8,8 @@ exports_files(
         "encoder_main.cc",
         "encoder_main_lib.cc",
         "encoder_main_lib.h",
+        "encoder_realtime.cc",
+        "decoder_realtime.cc",
     ],
 )
 
@@ -34,6 +36,7 @@ cc_library(
     ],
 )
 
+
 cc_library(
     name = "decoder_main_lib",
     srcs = [
@@ -127,6 +130,74 @@ cc_binary(
     ],
 )
 
+
+cc_binary(
+    name = "encoder_realtime",
+    srcs = [
+        "encoder_realtime.cc",
+    ],
+    data = ["//lyra:tflite_testdata"],
+    linkopts = select({
+        "//lyra:android_config": ["-landroid"],
+        "//conditions:default": [],
+    }),
+    deps = [
+        "@com_google_absl//absl/flags:flag",
+        "@com_google_absl//absl/flags:parse",
+        "@com_google_absl//absl/flags:usage",
+        "@com_google_absl//absl/status",
+        "@com_google_absl//absl/status:statusor",
+        "@com_google_absl//absl/strings",
+        "@com_google_absl//absl/time",
+        "@com_google_absl//absl/types:span",
+        "@com_google_glog//:glog",
+        ":encoder_main_lib",
+        "@gulrak_filesystem//:filesystem",
+        "//lyra:architecture_utils",
+        "//lyra:lyra_config",
+        "//lyra:lyra_encoder",
+        "//lyra:no_op_preprocessor",
+        "//lyra:wav_utils",
+    ],
+)
+
+cc_binary(
+    name = "decoder_realtime",
+    srcs = [
+        "decoder_realtime.cc",
+    ],
+    data = ["//lyra:tflite_testdata"],
+    linkopts = select({
+        "//lyra:android_config": ["-landroid"],
+        "//conditions:default": [],
+    }),
+    deps = [
+        ":decoder_main_lib",
+        "//lyra:architecture_utils",
+        "//lyra:fixed_packet_loss_model",
+        "//lyra:gilbert_model",
+        "//lyra:lyra_config",
+        "//lyra:lyra_decoder",
+        "//lyra:lyra_encoder",
+        "//lyra:no_op_preprocessor",
+        "//lyra:packet_loss_model_interface",
+        "//lyra:wav_utils",
+        "@com_google_absl//absl/flags:flag",
+        "@com_google_absl//absl/flags:marshalling",
+        "@com_google_absl//absl/flags:parse",
+        "@com_google_absl//absl/flags:usage",
+        "@com_google_absl//absl/random",
+        "@com_google_absl//absl/random:bit_gen_ref",
+        "@com_google_absl//absl/status",
+        "@com_google_absl//absl/status:statusor",
+        "@com_google_absl//absl/strings",
+        "@com_google_absl//absl/time",
+        "@com_google_absl//absl/types:span",
+        "@com_google_glog//:glog",
+        "@gulrak_filesystem//:filesystem",
+    ],
+)
+
 cc_binary(
     name = "decoder_main",
     srcs = [
diff --git a/lyra/cli_example/decoder_realtime.cc b/lyra/cli_example/decoder_realtime.cc
new file mode 100644
index 0000000..e82cfdb
--- /dev/null
+++ b/lyra/cli_example/decoder_realtime.cc
@@ -0,0 +1,140 @@
+#include <cstdio>
+#include <string>
+#include "absl/flags/flag.h"
+#include "absl/flags/parse.h"
+#include "absl/flags/usage.h"
+#include "absl/strings/string_view.h"
+#include "absl/flags/marshalling.h"
+#include "absl/random/bit_gen_ref.h"
+#include "absl/random/random.h"
+#include "absl/status/status.h"
+#include "absl/strings/string_view.h"
+#include "absl/time/clock.h"
+#include "absl/time/time.h"
+#include "absl/types/span.h"
+#include "glog/logging.h"  // IWYU pragma: keep
+#include "include/ghc/filesystem.hpp"
+#include "lyra/architecture_utils.h"
+#include "lyra/fixed_packet_loss_model.h"
+#include "lyra/gilbert_model.h"
+#include "lyra/lyra_config.h"
+#include "lyra/lyra_decoder.h"
+#include "lyra/wav_utils.h"
+#include "lyra/packet_loss_model_interface.h"
+#include "lyra/cli_example/decoder_main_lib.h"
+
+using namespace chromemedia;
+using namespace codec;
+
+ABSL_FLAG(int, num_channels, 1, "The number of channels in the input audio.");
+ABSL_FLAG(std::string, model_path, "lyra/model_coeffs",
+          "Path to directory containing TFLite files. For mobile this is the "
+          "absolute path, like "
+          "'/data/local/tmp/lyra/model_coeffs/'."
+          " For desktop this is the path relative to the binary.");
+ABSL_FLAG(int, sample_rate_hz, 16000, "Desired output sample rate in Hertz.");
+ABSL_FLAG(int, bitrate, 3200,
+          "The bitrate in bps at which the file has been quantized.");
+ABSL_FLAG(bool, randomize_num_samples_requested, false,
+          "If true, requests a random number of samples for decoding within "
+          "each hop. If false, requests only one whole hop at a time.");
+ABSL_FLAG(double, packet_loss_rate, 0.0,
+          "Percentage of packets that are lost.");
+
+ABSL_FLAG(double, average_burst_length, 1.0,
+          "Average length of periods where packets are lost.");
+
+ABSL_FLAG(chromemedia::codec::PacketLossPattern, fixed_packet_loss_pattern,
+          chromemedia::codec::PacketLossPattern({}, {}),
+          "Two lists representing the start, duration in seconds of "
+          "packet loss patterns. The exact start and duration of packet loss "
+          "bursts will be rounded up to the nearest packet duration boundary. "
+          "If this flag contains a nonzero number of values we ignore "
+          "|packet_loss_rate| and |average_burst_length|.");
+
+
+int main(int argc, char *argv[]) {
+    absl::SetProgramUsageMessage(argv[0]);
+    absl::ParseCommandLine(argc, argv);
+
+    const int sample_rate_hz = absl::GetFlag(FLAGS_sample_rate_hz);
+    const int bitrate = absl::GetFlag(FLAGS_bitrate);
+    const bool randomize_num_samples_requested = absl::GetFlag(FLAGS_randomize_num_samples_requested);
+    const float packet_loss_rate = absl::GetFlag(FLAGS_packet_loss_rate);
+    const float average_burst_length = absl::GetFlag(FLAGS_average_burst_length);
+    const chromemedia::codec::PacketLossPattern fixed_packet_loss_pattern = absl::GetFlag(FLAGS_fixed_packet_loss_pattern);
+    const ghc::filesystem::path model_path = chromemedia::codec::GetCompleteArchitecturePath( absl::GetFlag(FLAGS_model_path));
+    const int num_channels = absl::GetFlag(FLAGS_num_channels);
+
+    if (!fixed_packet_loss_pattern.starts_.empty()) {
+        LOG(INFO) << "Using fixed packet loss pattern instead of gilbert model.";
+    }
+
+    auto decoder = LyraDecoder::Create(sample_rate_hz, num_channels, model_path);
+    if (decoder == nullptr) {
+        LOG(ERROR) << "Cout not create lyra decoder.";
+    }
+
+    std::unique_ptr<PacketLossModelInterface> packet_loss_model;
+    if (fixed_packet_loss_pattern.starts_.empty()) {
+        packet_loss_model = GilbertModel::Create(packet_loss_rate, average_burst_length);
+    } else {
+        packet_loss_model = std::make_unique<FixedPacketLossModel>(
+            sample_rate_hz, GetNumSamplesPerHop(sample_rate_hz),
+            fixed_packet_loss_pattern.starts_,
+            fixed_packet_loss_pattern.durations_);
+    }
+    if (packet_loss_model == nullptr) {
+        LOG(ERROR) << "Could not create packet loss simulator model.";
+        return -1;
+    }
+
+    const int packet_size = BitrateToPacketSize(bitrate);
+    const int num_samples_per_packet = GetNumSamplesPerHop(decoder->sample_rate_hz());
+    absl::BitGen gen;
+    char read_buf[10];
+    int encoded_index = 0;
+    std::cout << "starting read loop..." << std::endl;
+    while(std::cin.read(read_buf, packet_size)) {
+        std::vector<char> wav_data(read_buf, read_buf + packet_size);
+        // const absl::Span<const int16_t> encoded_packet = absl::MakeConstSpan(wav_data.data(), packet_size);
+        const absl::Span<const uint8_t> encoded_packet(reinterpret_cast<const uint8_t*>(wav_data.data()), packet_size);
+        
+        const int frame_index = encoded_index / packet_size;
+        const float packet_start_seconds = static_cast<float>(frame_index) / decoder->frame_rate(); 
+        std::optional<std::vector<int16_t>> decoded;
+        if (packet_loss_model == nullptr || packet_loss_model->IsPacketReceived()) {
+            if (!decoder->SetEncodedPacket(encoded_packet)) {
+                LOG(ERROR) << "Unable to set encoded packet starting at byte "
+                           << encoded_index << " at time " << packet_start_seconds
+                           << "s.";
+                return -1;
+            }
+        } else {
+            VLOG(1) << "Decoding packet starting at " << packet_start_seconds
+                    << "seconds in PLC mode.";
+        }
+        int samples_decoded_so_far = 0;
+        while (samples_decoded_so_far < num_samples_per_packet) {
+            int samples_to_request = randomize_num_samples_requested
+                  ? std::min(absl::Uniform<int>(absl::IntervalOpenClosed, gen, 0, num_samples_per_packet), num_samples_per_packet - samples_decoded_so_far)
+                  : num_samples_per_packet;
+            VLOG(1) << "Requesting " << samples_to_request
+                    << " samples for decoding.";
+            decoded = decoder->DecodeSamples(samples_to_request);
+            if (!decoded.has_value()) {
+                LOG(ERROR) << "Unable to decode features starting at byte "
+                           << encoded_index;
+                return -1;
+            }
+            samples_decoded_so_far += decoded->size();
+            // for (auto x : decoded.value()) std::cout << x;
+            for (auto x : decoded.value()) {
+                std::cout << (uint8_t)x << (uint8_t) (x >> 8);
+            }
+        }
+        encoded_index += packet_size;
+    }
+
+    return 0;
+}
diff --git a/lyra/cli_example/encoder_realtime.cc b/lyra/cli_example/encoder_realtime.cc
new file mode 100644
index 0000000..de36978
--- /dev/null
+++ b/lyra/cli_example/encoder_realtime.cc
@@ -0,0 +1,84 @@
+#include <string>
+#include <system_error>  // NOLINT(build/c++11)
+#include <iostream>
+
+#include "absl/flags/flag.h"
+#include "absl/flags/parse.h"
+#include "absl/flags/usage.h"
+#include "absl/strings/string_view.h"
+#include "glog/logging.h"  // IWYU pragma: keep
+#include "include/ghc/filesystem.hpp"
+#include "lyra/architecture_utils.h"
+#include "lyra/cli_example/encoder_main_lib.h"
+#include "lyra/lyra_encoder.h"
+#include <cstdint>
+
+#include "absl/status/status.h"
+#include "absl/status/statusor.h"
+#include "absl/strings/string_view.h"
+#include "absl/time/clock.h"
+#include "absl/time/time.h"
+#include "absl/types/span.h"
+#include "glog/logging.h"  // IWYU pragma: keep
+#include "include/ghc/filesystem.hpp"
+#include "lyra/lyra_config.h"
+#include "lyra/lyra_encoder.h"
+#include "lyra/no_op_preprocessor.h"
+#include "lyra/wav_utils.h"
+
+using namespace chromemedia;
+using namespace codec;
+
+ABSL_FLAG(int, sample_rate_hz, 16000, "The sample rate in Hz of the input audio.");
+ABSL_FLAG(int, num_channels, 1, "The number of channels in the input audio.");
+ABSL_FLAG(bool, enable_dtx, true, "Enables discontinuous transmission (DTX). DTX does not send packets when noise is detected.");
+ABSL_FLAG(int, bitrate, 3200, "The bitrate in bps with which to quantize the file. The bitrate options can be seen in lyra_encoder.h");
+ABSL_FLAG(std::string, model_path, "lyra/model_coeffs",
+          "Path to directory containing TFLite files. For mobile this is the "
+          "absolute path, like "
+          "'/data/local/tmp/lyra/model_coeffs/'."
+          " For desktop this is the path relative to the binary.");
+
+
+int main(int argc, char **argv)
+{
+    absl::SetProgramUsageMessage(argv[0]);
+    absl::ParseCommandLine(argc, argv);
+    
+    const int sample_rate_hz = absl::GetFlag(FLAGS_sample_rate_hz);
+    const int num_channels = absl::GetFlag(FLAGS_num_channels);
+    const int bitrate = absl::GetFlag(FLAGS_bitrate);
+    const bool enable_dtx = absl::GetFlag(FLAGS_enable_dtx);
+    const ghc::filesystem::path model_path = chromemedia::codec::GetCompleteArchitecturePath(absl::GetFlag(FLAGS_model_path));
+    
+    auto encoder = chromemedia::codec::LyraEncoder::Create(sample_rate_hz, num_channels, bitrate, enable_dtx, model_path);
+
+    if (encoder == nullptr) {
+        LOG(ERROR) << "Could not create lyra encoder.";
+        return 1;
+    }
+
+    std::unique_ptr<PreprocessorInterface> preprocessor;
+	preprocessor = std::make_unique<NoOpPreprocessor>();
+	
+    const int num_samples_per_packet = sample_rate_hz / encoder->frame_rate();
+    std::vector<int16_t> wav_data;
+    wav_data.resize(num_samples_per_packet);
+	int16_t sample;
+
+    std::vector<uint8_t> encoded_features;
+	while(std::cin.read(reinterpret_cast<char*>(wav_data.data()), wav_data.size() * sizeof(int16_t))) {
+		std::vector<int16_t> processed_data(wav_data);
+		processed_data = preprocessor->Process(absl::MakeConstSpan(wav_data.data(), wav_data.size()), sample_rate_hz);
+		auto encoded = encoder->Encode(absl::MakeConstSpan(&processed_data.at(0), num_samples_per_packet));
+		if (!encoded.has_value()) {
+			LOG(ERROR) << "Unable to encoded features.";
+			return 1;
+		}
+		for (auto x : encoded.value()) std::cout << x;
+		//std::cout.write(reinterpret_cast<unsigned char>(encoded.value()), encoded.value().size());
+		//wav_data.clear();
+	}
+
+    return 0;
+}
